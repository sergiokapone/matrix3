# import webbrowser
from datetime import datetime
from pathlib import Path

from core.config import AppConfig
from core.data_manipulation import (
    get_mapped_competencies,
    get_mapped_program_results,
    load_discipline_data,
    prepare_disciplines_with_totals,
)
from core.file_utils import get_safe_filename, load_yaml_data, save_html_file
from core.logging_config import get_logger
from core.render_html import render_template
from core.validators import validate_yaml_schema

logger = get_logger(__name__)

config = AppConfig()


def generate_html_report(
    yaml_file: str,
    output_filename: str | None = None,
    template_filename: str = "report_template.html",
) -> None:
    """–ì–µ–Ω–µ—Ä—Ä—É—î –∑–≤—ñ—Ç–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—è–º —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –Ω–∞–≤—á–∞–Ω–Ω—è"""
    config = load_yaml_data(yaml_file)

    disciplines = config["disciplines"]
    competencies = config["competencies"]
    program_results = config["program_results"]
    mappings = config.get("mappings", {})
    metadata = config.get("metadata", {})
    unfilled_disciplines = [code for code in disciplines if code not in mappings]

    context = {
        "metadata": metadata,
        "disciplines": disciplines,
        "competencies": competencies,
        "program_results": program_results,
        "mappings": mappings,
        "unfilled_disciplines": unfilled_disciplines,
        "generated_at": datetime.now().strftime("%d.%m.%Y –æ %H:%M"),
    }

    # –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç
    html_content = render_template(template_filename, context)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ HTML —Ñ–∞–π–ª
    output_filename = get_safe_filename(output_filename)
    save_html_file(html_content, output_filename)

    # webbrowser.open(f"file://{Path(output_filename).absolute()}")
    # logger.info(f"üìä HTML –∑–≤—ñ—Ç –≤—ñ–¥–∫—Ä–∏—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ: {output_filename}")

    logger.debug("report page created")
    return True


def get_control_description(control_abbr: str, education_control: dict) -> str:
    """–û—Ç—Ä–∏–º—É—î –æ–ø–∏—Å –≤–∏–¥—É –∫–æ–Ω—Ç—Ä–æ–ª—é –∑ YAML"""
    CONTROL_MAPPING = {
        "–ú–ö–†": "modular_control_work",
        "–†–†": "calculation_work",
        "–†–ì–†": "calculation_work",
        "–†–µ—Ñ–µ—Ä–∞—Ç": "essay_analytical_review",
        "–°–†": "independent_work",
    }
    control_key = CONTROL_MAPPING.get(control_abbr)
    if control_key and control_key in education_control:
        name = education_control[control_key]["name"]
        description = education_control[control_key]["description"]
        return f"{name}: {description}"
    return control_abbr


def generate_discipline_page(
    yaml_file: str,
    discipline_code: str,
    output_filename: str | None = None,
    template_filename: str = "discipline_template.html",
) -> bool:
    """–ì–µ–Ω–µ—Ä—É—î HTML-—Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"""

    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ load_discipline_data –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    data, discipline = load_discipline_data(yaml_file, discipline_code)

    education_control = load_yaml_data(config.glossary_yaml)

    if data is None or discipline is None:
        logger.debug("Failed to load discipline data")
        return False

    # –û—Ç—Ä–∏–º—É—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    metadata = data.get("metadata", {})

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏
    general_comps, professional_comps = get_mapped_competencies(
        discipline_code, data.get("mappings", {}), data.get("competencies", {})
    )
    program_results = get_mapped_program_results(
        discipline_code,
        data.get("mappings", {}),
        data.get("program_results", {}),
    )

    # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–±–ª–æ–Ω—É
    context = {
        "discipline_code": discipline_code,
        "discipline": discipline,
        "metadata": metadata,
        "general_competencies": general_comps,
        "professional_competencies": professional_comps,
        "mapped_program_results": program_results,
        # –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        "get_control_description": lambda ctrl: get_control_description(
            ctrl, education_control
        ),
    }

    # –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç
    html_content = render_template(template_filename, context)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ HTML —Ñ–∞–π–ª
    output_filename = get_safe_filename(output_filename)
    save_html_file(html_content, output_filename)

    logger.debug("Discipline page created")
    return True


def generate_index_page(
    yaml_file: str | Path, output_file: str | Path = "index.html"
) -> bool:
    """–ì–µ–Ω–µ—Ä—É—î —ñ–Ω–¥–µ–∫—Å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω"""
    try:
        data = load_yaml_data(yaml_file)
        validate_yaml_schema(data)

        metadata = data.get("metadata", {})
        disciplines = data.get("disciplines", {}) | data.get(
            "elevative_disciplines", {}
        )

        disciplines = prepare_disciplines_with_totals(disciplines)

        context = {"metadata": metadata, "disciplines": disciplines}

        html_content = render_template("index_template.html", context)
        save_html_file(html_content, output_file)

        logger.debug("Index page created: %s", str(output_file))
        return True  # –£—Å–ø—ñ—Ö

    except Exception as e:
        logger.debug("Failed to generate index page: %s", str(e))
        return False  # –ù–µ —É—Å–ø—ñ—Ö
