import shutil
from pathlib import Path

from tabulate import tabulate

from core.excel_exporter import generate_excel_report
from core.file_utils import load_yaml_data, save_wp_links_yaml
from core.html_generator import (
    generate_discipline_page,
    generate_html_report,
    generate_index_page,
)
from core.logging_config import get_logger
from core.models import WordPressPage
from core.parse_index_links import parse_index_links
from core.wordpress_client import WordPressClient
from core.wordpress_uploader import (
    upload_all_pages,
    upload_discipline_page,
    upload_index,
)

logger = get_logger(__name__)

# ==================================================================================
# –£—Ç–∏–ª—ñ—Ç–∏
# ==================================================================================


def clean_output_directory(output_dir: Path | None = None) -> None:
    """
    –í–∏–¥–∞–ª—è—î –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∑ —É—Å—ñ–º –≤–º—ñ—Å—Ç–æ–º.
    """
    if output_dir is None:
        logger.warning("‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ ‚Äî –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    path = Path(output_dir)

    if not path.exists():
        logger.debug(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {path} –Ω–µ —ñ—Å–Ω—É—î, –Ω—ñ—á–æ–≥–æ –≤–∏–¥–∞–ª—è—Ç–∏")
        return

    try:
        shutil.rmtree(path)
        logger.debug(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {path} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ {path}: {e}")
        raise


def handle_dir_discipline(yaml_file: str | Path, max_len: int = 80) -> None:
    """
    –í–≤–æ–¥–∏—Ç—å —Ç–∞–±–ª–∏—Ü—é –∑ –∫–æ–¥–æ–º –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏, —ó—ó –Ω–∞–∑–≤–æ—é, —Ä–æ–∫–æ–º –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ —Ä—ñ–≤–Ω–µ–º –æ—Å–≤—ñ—Ç–∏.

    Args:
        yaml_file (str | Path): –®–ª—è—Ö –¥–æ YAML-—Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏.
        max_len (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ –Ω–∞–∑–≤–∏ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏. –Ø–∫—â–æ –Ω–∞–∑–≤–∞ –ø–µ—Ä–µ–≤–∏—â—É—î
            —Ü–µ–π –ª—ñ–º—ñ—Ç, –≤–æ–Ω–∞ –±—É–¥–µ –æ–±—Ä—ñ–∑–∞–Ω–∞ —Ç–∞ –¥–æ–ø–æ–≤–Ω–µ–Ω–∞ —Ç—Ä—å–æ–º–∞ –∫—Ä–∞–ø–∫–∞–º–∏. –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 80.

    Returns:
        None: –§—É–Ω–∫—Ü—ñ—è –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î, –ª–∏—à–µ –≤–∏–≤–æ–¥–∏—Ç—å —Ç–∞–±–ª–∏—Ü—é —É –∫–æ–Ω—Å–æ–ª—å.
    """

    data = load_yaml_data(yaml_file)
    all_disciplines = data.get("disciplines", {}).copy()
    if "elevative_disciplines" in data:
        all_disciplines.update(data.get("elevative_disciplines", {}))

    table_data = []
    for discipline_code, info in all_disciplines.items():
        name = info.get("name", "")
        if len(name) > max_len:
            name = name[: max_len - 3] + "..."  # –æ–±—Ä—ñ–∑–∞—î–º–æ —ñ –¥–æ–¥–∞—î–º–æ —Ç—Ä–∏ –∫—Ä–∞–ø–∫–∏
        table_data.append(
            [
                discipline_code,
                name,
                data.get("metadata").get("year"),
                data.get("metadata").get("degree"),
            ]
        )
    headers = ["–ö–æ–¥ ", "–ù–∞–∑–≤–∞", "–†—ñ–∫", "–†—ñ–≤–µ–Ω—å"]
    print(tabulate(table_data, headers=headers, tablefmt="grid"))


# ==================================================================================
# Handlers –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
# ==================================================================================


def handle_generate_report(yaml_file: str | Path, output_filename: Path) -> bool:
    """CLI —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç–Ω—ñ—Ö —Ç–∞–±–ª–∏—Ü—å"""

    return generate_html_report(str(yaml_file), str(output_filename))


def handle_generate_excel(yaml_file: str | Path, output_filename: Path) -> bool:
    """CLI —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç–Ω—ñ—Ö —Ç–∞–±–ª–∏—Ü—å –≤ excel"""

    return generate_excel_report(str(yaml_file), str(output_filename))


# ==================================================================================
# Handlers –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫
# ==================================================================================


def handle_generate_single_discipline(
    yaml_file: str | Path, output_filename: Path, discipline_code: str
) -> bool:
    """CLI —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–¥–Ω—ñ—î—ó –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏"""
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Path –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ

    template_name = "discipline_template.html"

    return generate_discipline_page(
        str(yaml_file), discipline_code, str(output_filename), template_name
    )


def handle_generate_all_disciplines(yaml_file: Path, output_dir: Path) -> dict:
    """CLI handler for generating all disciplines with a progress bar."""

    data = load_yaml_data(yaml_file)

    # Get all disciplines
    all_disciplines = data.get("disciplines", {}).copy()
    if "elevative_disciplines" in data:
        all_disciplines.update(data.get("elevative_disciplines", {}))

    total = len(all_disciplines)
    logger.info(f"üéØ Generating {total} disciplines from {yaml_file.name}")

    results = {}
    successful = 0

    # Generate disciplines with progress
    for i, discipline_code in enumerate(all_disciplines.keys(), 1):
        output_filename = output_dir / f"{discipline_code}.html"
        logger.info(f"[{i}/{total}] Generating {discipline_code}...")
        success = generate_discipline_page(
            str(yaml_file), discipline_code, str(output_filename)
        )
        results[discipline_code] = success
        if success:
            successful += 1

    logger.info(f"Results: {successful}/{total} successful")
    return results


# ==================================================================================
# Handlers –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫
# ==================================================================================


def handle_upload_discipline(
    discipline_code: str, yaml_file: Path, client: WordPressClient
) -> bool:
    """CLI —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –Ω–∞ WordPress"""

    try:
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ YAML
        yaml_data = load_yaml_data(yaml_file)

        # –û—Ç—Ä–∏–º—É—î–º–æ parent_id –∑ –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
        wp_parent_id = yaml_data.get("metadata", {}).get("page_id")
        # –û—Ç—Ç–∏–º—É—î–º–æ —Ä—ñ–∫ —Ä–æ–≥—Ä–∞–º–∏
        programm_year = yaml_data.get("metadata", {}).get("year")

        if not wp_parent_id:
            logger.debug("page_id not found in YAML metadata")
            return False

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
        all_disciplines = {
            **yaml_data.get("disciplines", {}),
            **yaml_data.get("elevative_disciplines", {}),
        }

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞
        if discipline_code not in all_disciplines:
            logger.debug(f"Discipline '{discipline_code}' not found in YAML")
            logger.debug(f"Available disciplines: {list(all_disciplines.keys())}")
            return False

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
        page = upload_discipline_page(
            discipline_code=discipline_code,
            discipline_info=all_disciplines[discipline_code],
            programm_year=programm_year,
            parent_id=wp_parent_id,
            client=client,
        )
        if page:
            logger.debug(f"‚úÖ Successfully uploaded: {discipline_code}")
            logger.debug(f"üîó Link: {page.get(discipline_code)}")
            return True
        else:
            logger.debug(f"Failed to upload: {discipline_code}")
            return False

    except Exception as e:
        logger.debug(f"Error uploading {discipline_code}: {e}")
        return False


def handle_upload_all_disciplines(
    yaml_file: str | Path, wp_links_file: Path, client: WordPressClient
) -> bool:
    """
    Handler –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω –Ω–∞ WordPress.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        yaml_file: —à–ª—è—Ö –¥–æ YAML —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω
        parent_id: ID –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —É WordPress
        client: —ñ–Ω—Å—Ç–∞–Ω—Å WordPressClient

    –ü–æ–≤–µ—Ä—Ç–∞—î:
        True —è–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞, False —ñ–Ω–∞–∫—à–µ
    """
    try:
        wp_data = upload_all_pages(yaml_file=yaml_file, client=client)
        if wp_data:
            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(wp_data)} —Å—Ç–æ—Ä—ñ–Ω–æ–∫")
            save_wp_links_yaml(wp_data, wp_links_file)
            return True
        else:
            logger.warning("–ñ–æ–¥–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–µ –±—É–ª–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
            return False
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {e}")
        return False


# ==================================================================================
# Handler –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É
# ==================================================================================


def handle_generate_index(
    yaml_file: str | Path, output_file: str = "index.html"
) -> bool:
    """CLI —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —ñ–Ω–¥–µ–∫—Å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑—ñ —Å–ø–∏—Å–∫–æ–º –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω"""

    logger.info(f"üìÑ Generating index page from: {yaml_file}")
    logger.info(f"üìÅ Output: {output_file}")

    try:
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–Ω–¥–µ–∫—Å–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        generate_index_page(str(yaml_file), str(output_file))
        logger.debug("Index page generated successfully!")
        return True

    except Exception as e:
        logger.debug(f"Failed to generate index page: {e}")
        return False


def handle_parse_index_links(yaml_file: str | Path) -> bool:
    """CLI —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–º—ñ–Ω–∏ –ª–æ–∫–∞–ª—å–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ WordPress –ø–æ—Å–∏–ª–∞–Ω–Ω—è"""

    try:
        result = parse_index_links(str(yaml_file))
        return result
    except Exception as e:
        logger.error(f"Failed to parse links: {e}")
        return False


# ==================================================================================
# Handler –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω–¥–µ–∫—Å—É
# ==================================================================================


def handle_upload_index(
    yaml_file: str | Path, client: WordPressClient
) -> WordPressPage | None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è CLI: –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω–¥–µ–∫—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ WordPress.

    Args:
        index_file (str | Path): –ü—É—Ç—å –∫ HTML-—Ñ–∞–π–ª—É –∏–Ω–¥–µ–∫—Å–∞.
        page_id (int): ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ WP –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        client (WordPressClient): –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ WP.

    Returns:
        WordPressPage | None: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    page = upload_index(yaml_file, client)

    if page:
        logger.debug(
            f"–ò–Ω–¥–µ–∫—Å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {page.title} (ID: {page.id})"
        )
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–¥–µ–∫—Å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")

    return page
