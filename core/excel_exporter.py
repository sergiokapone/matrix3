from pathlib import Path

import pandas as pd

from core.file_utils import load_yaml_data
from core.logging_config import get_logger

logger = get_logger(__name__)


def generate_excel_report(
    yaml_file: str, output_file: str | Path = "matrices.xlsx"
) -> None:
    """
    –ì–µ–Ω–µ—Ä—É—î Excel —Ñ–∞–π–ª –∑ –º–∞—Ç—Ä–∏—Ü—è–º–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ YAML –∫–æ–Ω—Ñ—ñ–≥—É
    """

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ YAML
    config = load_yaml_data(yaml_file)

    disciplines = config["disciplines"]
    competencies = config["competencies"]
    program_results = config["program_results"]
    mappings = config["mappings"]

    # === –ú–ê–¢–†–ò–¶–Ø –ö–û–ú–ü–ï–¢–ï–ù–¶–Ü–ô ===
    comp_df = pd.DataFrame(
        "", index=list(competencies.keys()), columns=list(disciplines.keys())
    )

    # === –ú–ê–¢–†–ò–¶–Ø –ü–†–û–ì–†–ê–ú–ù–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–Ü–í ===
    prog_df = pd.DataFrame(
        "", index=list(program_results.keys()), columns=list(disciplines.keys())
    )

    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –º–∞—Ç—Ä–∏—Ü—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ mappings
    for discipline_code, mapping in mappings.items():
        if discipline_code in disciplines:
            # –ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó
            for comp_code in mapping.get("competencies", []):
                if comp_code in comp_df.index:
                    comp_df.at[comp_code, discipline_code] = "+"

            # –ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            for prog_code in mapping.get("program_results", []):
                if prog_code in prog_df.index:
                    prog_df.at[prog_code, discipline_code] = "+"

    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–≥–∞—Ç–æ—Ä—ñ–≤–Ω–µ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    # üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏
    comp_columns = pd.MultiIndex.from_tuples(
        [
            (
                disciplines[code].get("name", code)
                if isinstance(disciplines[code], dict)
                else disciplines[code],
                code,
            )
            for code in comp_df.columns
        ],
        names=["–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞", "–ö–æ–¥"],
    )

    prog_columns = pd.MultiIndex.from_tuples(
        [
            (
                disciplines[code].get("name", code)
                if isinstance(disciplines[code], dict)
                else disciplines[code],
                code,
            )
            for code in prog_df.columns
        ],
        names=["–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞", "–ö–æ–¥"],
    )

    comp_df.columns = comp_columns
    prog_df.columns = prog_columns

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –æ–¥–∏–Ω Excel —Ñ–∞–π–ª –∑ —Ç—Ä—å–æ–º–∞ –ª–∏—Å—Ç–∞–º–∏
    with pd.ExcelWriter(output_file, engine="openpyxl") as writer:
        comp_df.to_excel(writer, sheet_name="–ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ")
        prog_df.to_excel(writer, sheet_name="–ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏")

        # === –ó–í–ï–î–ï–ù–ê –¢–ê–ë–õ–ò–¶–Ø ===
        summary_data = []
        for disc_code, disc_info in disciplines.items():
            # üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –æ–±—Ä–æ–±–∫–∞ —Å–ª–æ–≤–Ω–∏–∫–∞ –∞–±–æ —Ä—è–¥–∫–∞
            disc_name = (
                disc_info.get("name", disc_code)
                if isinstance(disc_info, dict)
                else disc_info
            )
            mapping = mappings.get(disc_code, {})
            comps = mapping.get("competencies", [])
            progs = mapping.get("program_results", [])

            summary_data.append(
                {
                    "–ö–æ–¥": disc_code,
                    "–î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞": disc_name,
                    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó": ", ".join(comps) if comps else "",
                    "–ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏": ", ".join(progs) if progs else "",
                    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π": len(comps),
                    "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ü–†–ù": len(progs),
                }
            )

        summary_df = pd.DataFrame(summary_data)
        summary_df.to_excel(writer, sheet_name="–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è", index=False)

        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∑–≤–µ–¥–µ–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ
        worksheet = writer.sheets["–ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è"]
        worksheet.column_dimensions["A"].width = 10  # –ö–æ–¥
        worksheet.column_dimensions["B"].width = 50  # –î–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞
        worksheet.column_dimensions["C"].width = 40  # –ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó
        worksheet.column_dimensions["D"].width = 40  # –ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        worksheet.column_dimensions["E"].width = 15  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ–π
        worksheet.column_dimensions["F"].width = 15  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ü–†–ù

    logger.info(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: {output_file}")
    logger.info(f"üìä –ö–æ–º–ø–µ—Ç–µ–Ω—Ü—ñ—ó: {len(competencies)} x {len(disciplines)}")
    logger.info(f"üìä –ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: {len(program_results)} x {len(disciplines)}")
    logger.info(f"üìã –ó–≤–µ–¥–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü—è: {len(disciplines)} –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω")
